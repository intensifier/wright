#! /usr/bin/env node

const minimist = require('minimist')
    , fs = require('fs')
    , path = require('path')
    , wright = require('../lib/')
    , pkg = require('../package.json')
    , utils = require('../lib/utils')

const command = minimist(process.argv.slice(2), {
  string: ['js', 'css'],
  default: {
    'jail': true,
    'assets': []
  },
  alias: {
    h: 'help',
    b: 'browser',
    v: 'version',
    e: 'execute',
    r: 'run',
    s: 'serve',
    a: 'assets',
    p: 'port',
    d: 'debug',
    f: 'fps',
    w: 'watch',
    j: 'jail',
    c: 'clone',
    n: 'name'
  },
  boolean: ['fps', 'jail']
})

if (command._.length === 0)
  return require('./interactive')

command.main = command._[0]

const help = command.help || command.main === 'help'
const version = command.version || command.main === 'version'

if (help)
  return console.log(fs.readFileSync(path.join(__dirname, 'README'), 'utf8').replace('${version}', pkg.version))
else if (version)
  return console.log('wright version ' + pkg.version)

wright({
  main      : command.main,
  run       : command.run,
  browser   : command.browser ||Â 'chrome',
  js        : command.js ? parseInjections(command.js) : null,
  css       : command.css ? parseInjections(command.css) : null,
  execute   : command.execute ? parseExecutes(command.execute) : null,
  env       : command.env,
  name      : command.name,
  jail      : command.jail,
  fps       : command.fps,
  port      : command.port,
  serve     : command.serve,
  assets    : command.assets,
  clone     : command.clone,
  debug     : command.debug,
  watch     : command.watch,
  watchThrottle: command['watch-throttle']
}).catch(err => console.error(err))

function parseInjections(str) {
  return (Array.isArray(str) ? str : [str]).map(part => ({
    compile: part.split(';')[0],
    path: part.split(';')[1] === '_' ? null : part.split(';')[1],
    watch: part.split(';')[2] === '_' ? null : part.split(';')[2],
  }))
}

function parseExecutes(str) {
  return (Array.isArray(str) ? str : [str]).map(part => ({
    command: part.split(';')[0],
    watch: part.split(';')[1]
  }))
}
